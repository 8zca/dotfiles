# vim:set ft=zsh:

function rprompt-git-current-branch {
  # http://d.hatena.ne.jp/uasi/20091025/1256458798
  local name st color gitdir action annotation stashes
  if [[ "$PWD" =~ '\.git(/.*)?$' ]]; then
    return
  fi
  name=$(git symbolic-ref --short HEAD 2> /dev/null)
  if [[ -z $name ]]; then
    return
  fi

  gitdir=`git rev-parse --git-dir 2> /dev/null`
  action=`VCS_INFO_git_getaction "$gitdir"` && action="($action)"

  # Remote and Local changes {{{
  local \
    threshold \
    current_remote \
    merge_name \
    remote_ref \
    remote_local_revs \
    revs_count \
    behind \
    ahead \
    behind_and_ahead

  threshold=999
  current_remote=$(git config branch.${name}.remote 2> /dev/null)
  merge_name=$(git config branch.${name}.merge 2> /dev/null)

  if [[ "." = "$current_remote" ]] || [[ "x" = "x$current_remote" ]]; then
    # Clone from local
    remote_ref=$merge_name
    remote_local_revs=$(git rev-list --left-right ${merge_name}...HEAD)
  else
    remote_ref="refs/remotes/${current_remote}/$(echo $merge_name | sed -e 's/^refs\/heads\///')"
    remote_local_revs=$(git rev-list --left-right ${remote_ref}...HEAD)
  fi

  revs_count=$(echo "${remote_local_revs}" | sed -e '/^$/d' | wc -l)
  ahead=$(echo "${remote_local_revs}" | grep '^>' | wc -l)
  behind=$((${revs_count} - ${ahead}))

  if [[ $ahead -ge 0 ]]; then
    local __ahead_revs
    if [[ $revs_count -lt $threshold ]]; then
      for i in $(seq ${ahead}); do
        __ahead_revs=">$__ahead_revs"
      done
    else
      __ahead_revs=">$ahead"
    fi
    behind_and_ahead="%{${fg[green]}%}$__ahead_revs%f%b${behind_and_ahead}"
  fi
  if [[ $behind -ge 0 ]]; then
    local __behind_revs
    if [[ $revs_count -lt $threshold ]]; then
      for i in $(seq ${behind}); do
        __behind_revs="<${__behind_revs}"
      done
    else
      __behind_revs="<${__behind_revs}"
    fi
    behind_and_ahead="%{${fg[red]}%}${__behind_revs}%f%b${behind_and_ahead}"
  fi
  if [[ ! "$behind_and_ahead" == "" ]]; then
    behind_and_ahead="$behind_and_ahead "
  fi
  # }}}

  # stashes count {{{
  stashes=$(git --no-pager stash list 2> /dev/null | wc -l)
  [[ "$stashes" != "" ]] && stashes=" %{${fg[yellow]}%}@$stashes"
  # }}}

  st=`git status --short --porcelain -b 2> /dev/null`

  # Staged changes {{{
  if [[ -n `echo "$st" | grep "^[UMADRC]"` ]]; then
    # Staged
    annotation="$annotation*"
    color=%F{yellow}
  fi
  # }}}

  # Untracked changes {{{
  if [[ -n `echo "$st" | grep "??"` ]]; then
    # Untracked
    annotation="$annotation?"
    color=%F{yellow}
  fi
  # }}}

  # Changed, but not staged {{{
  if [[ -n `echo "$st" | grep "^[ ][MD]"` ]]; then
    # Changed, but not staged
    annotation="$annotation!"
    color=%F{red}
  fi
  # }}}

  if [[ -z "$color" ]]; then
    color=%F{green}
  fi

  echo "$behind_and_ahead$color$name$action$annotation$stashes%f%b"
}

