; -*- lisp -*-
(defun insert-xml-date ()
	(interactive)
	(insert (format-date-string "%Y-%m-%dT%H:%M:%S+09:00")))
;(global-set-key '(#\C-d #\Insert) 'insert-xml-date)

(defun new-may-entry ()
	(interactive)
	(let ((d (get-universal-time)))
		(copy-file "D:/Web/aereal.org/.jigsaw" (concat "D:/Web/aereal.org" (format-date-string "/%Y-%m-%d-%H%M%S.xml" d)))
		(find-file (concat "D:/Web/aereal.org" (format-date-string "/%Y-%m-%d-%H%M%S.xml" d)))
		(replace-string "$datetime" (format-date-string "%Y-%m-%dT%H:%M:%S+09:00" d))))

(defun may-entry-sync ()
	(interactive)
	(execute-shell-command (format nil "ruby D:/Projects/ruby/may-sync.rb ~A"
																 (get-buffer-file-name))))

(defun new-ruby-project ()
	(interactive)
	(let ((project-name (read-string "Project Name: ")))
		(execute-shell-command (format nil "ruby D:/Sketches/new-ruby-project.rb ~A"
																	 project-name))))

(defun interactive-create-directory ()
	(interactive)
	(let ((dest-dir (read-string (format nil "Create Directory: " ) (string (directory-namestring (or (get-buffer-file-name (selected-buffer)) (user-homedir-pathname)))))))
		(create-directory dest-dir)))

(defun interactive-create-directory ()
	(interactive)
	(let
			((dest-dir (read-string "Create Directory: " :default (directory-namestring
																										(or (get-buffer-file-name) (user-homedir-pathname))
																										))))
		(create-directory dest-dir)))

(setq *next-buffer-in-tab-order* t)
(global-set-key #\M-n 'next-buffer)
(global-set-key #\M-p 'previous-buffer)
(global-set-key '(#\C-c #\d) 'interactive-create-directory)
(global-set-key '(#\C-x #\m #\Insert) 'new-may-entry)
(global-set-key '(#\C-x #\m #\s) 'may-entry-sync)
(global-set-key '#\M-SPC 'set-mark-command)