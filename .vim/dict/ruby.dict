BEGIN
END
alias
and
begin
break
case
class
def
defined?
do
else
elsif
end
ensure
false
for
if
in
module
next
nil
not
or
redo
rescue
retry
return
self
super
then
true
undef
unless
until
when
while
yield

abort
at_exit
autoload
binding
block_given?
iterator?
callcc
caller
catch
chomp
chop
eval
exec
exit
raise
fail
fork
sprintf
format
getc
gets
global_variables
gsub
proc
lambda
load
local_variables
loop
open
print
printf
putc
puts
rand
readline
readlines
require
require_relative
scan
select
set_trace_func
sleep
split
srand
sub
syscall
system
test
throw
trace_var
trap
untrace_var
warn
ARGF
ARGV
DATA
ENV
RUBY_COPYRIGHT
RUBY_DESCRIPTIOn
RUBY_PATCHLEVEL
RUBY_PLATFORM
RUBY_RELEASE_DATE
RUBY_VERSION
SCRIPT_LINES__
STDERR
STDIN
STDOUT
TOPLEVEL_BINDING
$LOADED_FEATURES
$LOAD_PATH
$KCODE
$DEBUG
$VERBOSE
$PROGRAM_NAME

Array
Bignum
Binding
Class
Comparable
Continuation
Data
Dir
Enumerable
Enumerator
Errno
FalseClass
File
FileTest
Fixnum
Float
GC
Hash
IO
Integer
Kernel
Marshal
MatchData
Math
Method
Module
NilClass
Numeric
Object
ObjectSpace
Precision
Proc
Process
Range
Regexp
Signal
String
Struct
Symbol
Thread
ThreadGroup
Time
TrueClass
UnboundMethod

ArgumentError
EOFError
Exception
FloatDomainError
IOError
IndexError
Interrupt
LoadError
LocalJumpError
NameError
NoMemoryError
NoMethodError
NotImplementedError
RangeError
RegexpError
RuntimeError
ScriptError
SecurityError
SignalException
StandardError
StopIteration
SyntaxError
SystemCallError
SystemExit
SystemStackError
ThreadError
TypeError
ZeroDivisionError
fatal

object_id
__id__
id
send
__send__
_dump
type
clone
dup
display
to_enum
enum_for
eql?
equal?
extend
freeze
frozen?
hash
inspect
instance_eval
instance_of?
instance_variable_defined?
instance_variable_get
instance_variable_set
instance_variables
is_a?
kind_of?
marshal_dump
marshal_load
method
method_missing
methods
nil?
private_methods
protected_methods
public_methods
respond_to?
singleton_methods
taint
tainted?
tap
to_a
to_ary
to_hash
to_int
to_io
to_proc
to_regexp
to_s
to_str
untaint
initialize
initialize_copy
instance_exec
remove_instance_variable
singleton_method_added
singleton_method_removed
singleton_method_undefined

constants
nesting
new
ancestors
module_eval
class_eval
class_variable_defined?
class_variables
const_defined?
const_get
const_missing
const_set
included_modules
instance_method
instance_methods
method_defined?
name
private_class_method
private_instance_methods
private_method_defined?
protected_instance_methods
protected_method_defined?
public_class_method
public_instance_methods
public_method_defined?
alias_method
append_features
attr
attr_accessor
attr_reader
attr_writer
module_exec
class_exec
class_variable_get
class_variable_set
define_method
extend_object
extended
include
included
method_added
method_removed
method_undefined
module_function
private
protected
public
remove_class_variable
remove_const
remove_method
undef_method
allocate
superclass
inherited

between?

all?
any?
collect
map
count
cycle
find
detect
drop
drop_while
each_cons
enum_cons
each_slice
enum_slice
each_with_index
enum_with_index
to_a
entries
find_all
select
find_index
first
grep
group_by
member?
inject
reduce
max
max_by
min
min_by
minmax
minmax_by
none?
one?
partition
sort
sort_by
take
take_while
zip

assoc
at
choice
clear
combination
compact
concat
delete
delete_at
delete_if
each
each_index
empty?
fetch
fill
flatten
index
indexes
insert
join
last
length
size
nitems
pack
permutation
pop
product
push
rassoc
replace
reverse
reverse_each
rindex
shift
shuffle
slice
transpose
uniq
unshift
values_at

store
default
default_proc
each_pair
each_key
each_value
has_key?
key?
has_value?
value?
indices
invert
keys
merge
rehash
update
values

each_byte
bytes
bytesize
capitalize
casecmp
center
each_char
chars
count
crypt
downcase
dump
each_line
lines
end_with?
gsub
hex
intern
ljust
lstrip
match
succ
next
oct
rindex
rjust
rpartition
rstrip
scan
split
squeeze
start_with?
strip
sum
swapcase
tr
tr_s
unpack
upcase
upto

compile
escape
quote
last_match
union
casefold?
kcode
options
source

call
arity

exclude_end?
step

abs
ceil
coerce
div
divmod
quo
fdiv
floor
modulo
nonzero?
remainder
round
truncate
zero?
induced_from
chr
downto
even?
odd?
ord
pred
times

for_fd
foreach
pipe
popen
read
sysopen
binmode
close
close_read
close_write
closed?
eof
fcntl
fileno
flush
fsync
getbyte
ioctl
isatty
tty?
lineno
lines
pid
pos
tell
read_nonblock
readbyte
readchar
readpartial
reopen
rewind
seek
stat
sync
sysread
sysseek
syswrite
ungetc
write
write_nonblocking

atime
basename
blockdev?
chardev?
chmod
chown
ctime
unlink
directory?
dirname
executable?
executable_real?
exist?
exists?
expand_path
extname
file?
fnmatch
ftype
grpowned?
identical?
join
lchmod
link
lstat
mtime
owned?
readable?
readable_real?
readlink
rename
setgid?
setuid?
socket?
sticky?
symlink
umask
utime
writable?
writable_real?
flock
path

FATAL
ERROR
WARN
INFO
DEBUG
add
log
datetime_format
debug
error
formatter
info
level
sev_threshold
progname
unknown
set_log
start

a_kind_of
add
add_example_group
add_message_expectation
add_negative_message_expectation
add_stub
advise
after
after_all_parts
after_each_parts
after_suit_parts
an_instance_of
and_raise
and_return
and_throw
and_yield
any_args
any_number_of_times
anything
append_after
append_before
args_match?
as_null_object
at_least
at_most
backtrace
be
be_a
be_a_kind_of
be_an
be_an_instance_of
be_close
be_instance_of
be_kind_of
before
before_all_parts
before_each_parts
before_suite_parts
blue
boolean
called_max_times?
chain
change
clean_up_double_slashes
colorize_failure
colour
colourise
configure
consume
context
context_lines
convert
create
create_example_group
current_indentation
custom_runner
debugger
default
default_differ
define
define_predicate_matchers
describe
described_class
described_type
description
description_args
determine_best_match
determine_superclass
diff_as_hash
diff_as_object
diff_as_string
diffable
double
drb_port
duck_type
eval_block
exactly
example
expect
expected_args
explanation
finish
finished
green
have
have_at_least
have_at_most
have_exactly
header
heckle
heckle_class_or_module
heckle_method
heckle_with
helper
invoke
is_best_match?
is_matcher?
it
it_should_behave_like
its
kind_of
let

