" vim:set et foldmethod=marker:

source $HOME/.vim/rc/bundle.vim

" autocmd {{{
augroup MyInit
  autocmd!
  " screen title {{{
  if ! has('gui_running')
    autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]://" | silent! exe '!echo -n "k%:t\\"' | endif
  endif " }}}
  " CoffeeScript {{{
  autocmd ColorScheme * hi! link CoffeeSpecialVar Constant
  " }}}
  " Haskell {{{
  autocmd FileType haskell setlocal et
  " }}}
  " Perl {{{
  autocmd BufNewFile,BufRead cpanfile setlocal filetype=cpanfile
  autocmd BufNewFile,BufRead cpanfile setlocal syntax=perl.cpanfile

  autocmd BufEnter *.tt setlocal ft=tt2
  autocmd BufEnter *.t  setlocal ft=perl
  " }}}
  " Vim {{{
  autocmd FileType vim inoreabbrev <buffer> = =
  " }}}
  " Markdown {{{
  autocmd FileType markdown setlocal et ts=4 sts=4 sw=4
  " }}}
  " Nginx {{{
  autocmd BufEnter */nginx/*.conf setlocal ft=nginx
  autocmd BufEnter */*.nginx.conf setlocal ft=nginx
  " }}}
  " HTML {{{
  autocmd FileType html inoremap <buffer> = =
  " }}}
  " Hatena {{{
  autocmd BufNewFile,BufRead *.hatena setlocal filetype=hatena

  autocmd BufEnter */Hatena/*          setlocal et ts=4 sts=4 sw=4
  autocmd BufEnter */Hatena/*.html.erb setlocal ts=2 sts=2 sw=2
  autocmd BufEnter */Hatena/*.html     setlocal ts=2 sts=2 sw=2
  autocmd BufEnter */Hatena/*.html.tt  setlocal ts=2 sts=2 sw=2
  autocmd BufEnter */Hatena/*.html     setlocal ft=tt2html
  autocmd BufEnter */Hatena/*.tt       setlocal ft=tt2html
  " }}}
  " Close window with `q` key {{{
  autocmd FileType help,ref-* nnoremap <buffer> q :q<CR>
  " }}}
  " Git config {{{
  autocmd FileType gitconfig setlocal noexpandtab
  " }}}
  " Ruby {{{
  autocmd BufEnter *.podspec set ft=ruby
  autocmd BufEnter Podfile set ft=ruby
  " }}}
augroup END
" }}}

" Configurations {{{
set hidden
set history=1000
set autoread
set fileformats=unix,dos,mac
set scrolloff=100000 " Â∏∏„Å´„Ç´„Éº„ÇΩ„É´„ÅÆ„ÅÇ„ÇãË°å„Çí‰∏≠ÂøÉ„Å´ („Åó„Åü„ÅÑ)
set backspace=indent,eol,start
set formatoptions-=ro
set ttyfast
" set lazyredraw
set completeopt=menuone,menu

" Backup & Swap {{{
set nobackup
set swapfile
set directory=~/.vim/swp
" }}}
" Indentation {{{
set autoindent
set nosmartindent
set nocindent
set smarttab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab
set shiftround
" }}}
" Encoding {{{
set fileencodings=utf-8,iso-2022-jp,euc-jp,cp932,ucs-bom,default,latin1
set encoding=utf-8
set termencoding=utf-8
" }}}
" Search {{{
set ignorecase
set smartcase
set hlsearch
set incsearch
set wrapscan
" }}}
" Visualization {{{
set ambiwidth=double
set list
set listchars=tab:¬ª\ ,precedes:<,extends:>,trail:_,eol:‚Ü≤
" }}}
" UI {{{
set langmenu=none " „É°„Éã„É•„Éº„Çí„É≠„Éº„Ç´„É©„Ç§„Ç∫„Åó„Å™„ÅÑ
set laststatus=2
set number
set ruler
set modeline
set noshowcmd
set noshowmode
set shortmess+=I

if v:version >= 704
  " set relativenumber " 7.4 ‰ª•Èôç„Å†„Å®Áµ∂ÂØæË°åÊï∞„ÇÇË°®Á§∫„Åï„Çå„Çã
endif
" }}}
" IME {{{
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
" }}}
" Conceal {{{
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" }}}
" Persistent Undo {{{
if has('persistent_undo')
  set undodir=~/.vim/undo
  set undofile
endif
" }}}
" Clipboard Integration {{{
if has('clipboard')
  set clipboard=unnamed,autoselect
endif
" }}}
" fish-shell fix {{{
if $SHELL =~# 'fish$'
  if executable('zsh')
    set shell=zsh
  else
    set shell=sh
  endif
endif
" }}}
" }}}

" Tabpage {{{
set showtabline=2
set guioptions-=e
function! s:tabpage_label(n) " {{{
  let title = gettabvar(a:n, 'title')
  if title != ''
    return title
  endif

  let buffers = tabpagebuflist(a:n)
  let highlight_field = a:n is tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
  let buffers_count = len(buffers)
  if buffers_count is 1
    let buffers_count = ''
  endif
  let modified_indicator = len(filter(copy(buffers), 'getbufvar(v:val, "&modified")')) ? '+' : ''
  let indicator = buffers_count . modified_indicator
  let separator = indicator ==# '' ? '' : ' '
  let current_buffer = buffers[tabpagewinnr(a:n) - 1]
  let fname = pathshorten(bufname(current_buffer))
  let label = indicator . separator . fname

  return '%' . a:n . 'T' . highlight_field . label . '%T%#TabLineFill#'
endfunction " }}}
function! MakeTabLine() " {{{
  let titles = map(range(1, tabpagenr('$')), '"|" . s:tabpage_label(v:val) . "|"')
  let separator = ' '
  let tabpages = join(titles, separator) . separator . '%#TabLineFill#%T'
  let extra = ''
  let extra .= cfi#format('[%s()]', '')
  let extra .= '[' . fnamemodify(getcwd(), ':~') . ']'
  return tabpages . '%=' . extra
endfunction " }}}
set tabline=%!MakeTabLine()
" }}}

" Key mappings {{{
let mapleader   = ';'
let g:mapleader = ';'

nnoremap j gj
nnoremap k gk
nnoremap Y y$

nnoremap <Leader><Space> :update<CR>
nnoremap <ESC><ESC>      :nohlsearch<CR>

nnoremap Q <Nop>
nnoremap ZQ <Nop>
nnoremap ZZ <Nop>

nnoremap ) %
nnoremap ( %

nnoremap <Space>h ^
nnoremap <Space>l $
" }}}

" Plugin Configurations {{{
" clang_complete {{{
let g:clang_use_library = 1
let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'
let g:clang_complete_auto = 1
let g:clang_auto_select = 0
let g:clang_auto_user_options = 'path, .clang_complete'
" }}}
" neocomplete.vim {{{
let g:neocomplete#enable_at_startup = 1

if neobundle#is_installed('neocomplete.vim')
  let s:bundle = neobundle#get('neocomplete.vim')

  function! s:bundle.hooks.on_source(bundle)
    if ! exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_overwrite_completefunc = 1
    let g:neocomplete#force_omni_input_patterns.c      = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#force_omni_input_patterns.objc   = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#force_omni_input_patterns.cpp    = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#force_omni_input_patterns.objcpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    let g:neocomplete#sources#syntax#min_keyword_length = 3

    let g:neocomplete#keyword_patterns                  = {}
    let g:neocomplete#keyword_patterns.default          = '\h\w*'

    let g:neocomplete#delimiter_patterns                = {}
    let g:neocomplete#delimiter_patterns.vim            = ['#']
    let g:neocomplete#delimiter_patterns.perl           = ['::']
    let g:neocomplete#delimiter_patterns.ruby           = ['::']

    imap <expr> <C-h> neocomplete#smart_close_popup() . "\<Plug>(smartinput_C-h)"
    imap <expr> <BS>  neocomplete#smart_close_popup() . "\<Plug>(smartinput_BS)"
    inoremap <expr> <C-g> neocomplete#undo_completion()

    autocmd MyInit CmdwinEnter * let b:neocomplete_sources = ['vim']
  endfunction

  unlet s:bundle
endif
" }}}
" neocomplcache {{{
if neobundle#is_installed('neocomplcache')
  let s:bundle = neobundle#get('neocomplcache')

  let g:neocomplcache_enable_at_startup = 1
  if !exists('g:neocomplcache_dictionary_filetype_lists')
    let g:neocomplcache_dictionary_filetype_lists = {}
  endif
  let g:neocomplcache_temporary_dir = '~/.vim/.neocon'
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_vim_completefuncs = {
        \ 'Ref' : 'ref#complete',
        \ 'Unite' : 'unite#complete_source',
        \}

  if !exists('g:neocomplcache_keyword_patterns')
      let g:neocomplcache_keyword_patterns = {}
  endif
  let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
  " Delimiter {{{
  if !exists('g:neocomplcache_delimiter_patterns')
      let g:neocomplcache_delimiter_patterns = {}
  endif

  let g:neocomplcache_delimiter_patterns.vim = ['#']
  let g:neocomplcache_delimiter_patterns.ruby = ['::']
  let g:neocomplcache_delimiter_patterns.perl = ['::']
  " }}}

  function! s:bundle.hooks.on_source(bundle) " {{{
    imap <expr> <C-h> neocomplcache#smart_close_popup() . "\<Plug>(smartinput_C-h)"
    imap <expr> <BS>  neocomplcache#smart_close_popup() . "\<Plug>(smartinput_BS)"
    inoremap <expr> <C-g> neocomplcache#undo_completion()
  endfunction " }}}

  unlet s:bundle
endif
" }}}
" neosnippet {{{
let g:neosnippet#disable_select_mode_mappings = 0
let g:neosnippet#snippets_directory = '~/.vim/snippets'

let neosnippet = neobundle#get('neosnippet')
function! neosnippet.hooks.on_source(bundle) " {{{
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
endfunction " }}}
unlet neosnippet
" }}}
" fugitive {{{
let fugitive = neobundle#get('vim-fugitive')
function! fugitive.hooks.on_source(bundle) " {{{
  nnoremap [fugitive] <Nop>
  nmap ,g [fugitive]

  nnoremap [fugitive]s :<C-u>Gstatus<CR>
  nnoremap [fugitive]c :<C-u>Gcommit<CR>
  nnoremap [fugitive]C :<C-u>Gcommit --amend<CR>
  nnoremap [fugitive]b :<C-u>Gblame<CR>
  nnoremap [fugitive]a :<C-u>Gwrite<CR>
  nnoremap [fugitive]d :<C-u>Gdiff<CR>
  nnoremap [fugitive]D :<C-u>Gdiff --staged<CR>

  vmap ,go :Gbrowse<CR>

  autocmd MyInit BufReadPost fugitive://* set bufhidden=delete
endfunction " }}}
unlet fugitive
" }}}
" surround_custom_mapping {{{
let g:surround_custom_mapping = {}
let g:surround_custom_mapping.ruby  = {
  \ '#': "#{\r}",
  \ '3': "#{\r}",
  \ '5': "%(\r)",
  \ '%': "%(\r)",
  \ 'w': "%w(\r)",
  \ }
let g:surround_custom_mapping.eruby = {
  \ '-': "<% \r %>",
  \ '=': "<%= \r %>",
  \ '#': "#{\r}",
  \ }
let g:surround_custom_mapping.tt2 = {
      \ '%': "[% \r %]",
      \ }
let g:surround_custom_mapping.tt2html = g:surround_custom_mapping.tt2
" }}}
" emmet-vim {{{
let g:user_emmet_leader_key = '<C-e>'
" }}}
" ref-vim {{{
let g:ref_cache_dir = $HOME . '/.vim/.ref'
" }}}
" unite-vim {{{
let g:unite_data_directory = '~/.vim/.unite'
let g:unite_force_overwrite_statusline = 0

if executable('ag')
  let g:unite_source_grep_command        = 'ag'
  let g:unite_source_grep_default_opts   = '--nocolor --nogroup'
  let g:unite_source_grep_recursive_opt  = ''
  let g:unite_source_grep_max_candidates = 200
endif

let unite = neobundle#get('unite.vim')
function! unite.hooks.on_source(bundle) " {{{
  autocmd MyInit FileType unite nmap <buffer><BS> <Plug>(unite_delete_backward_path)
  autocmd MyInit FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()
    let unite = unite#get_current_unite()

    nmap <buffer> <BS> <Plug>(unite_delete_backward_path)

    nnoremap <buffer><silent><expr> <C-w>h unite#do_action('left')
    nnoremap <buffer><silent><expr> <C-w>l unite#do_action('right')
    nnoremap <buffer><silent><expr> <C-w>j unite#do_action('below')
    nnoremap <buffer><silent><expr> <C-w>k unite#do_action('above')

    if unite.buffer_name == 'files'
      nnoremap <buffer><silent><expr> r unite#do_action('rename')
    endif
  endfunction

  nnoremap <SID>[unite] <Nop>
  nmap <Space> <SID>[unite]

  nnoremap <silent> / :<C-u>Unite line -buffer-name=search -start-insert<CR>
  nnoremap <silent> * :<C-u>UniteWithCursorWord line -buffer-name=search<CR>
  nnoremap <silent> n :<C-u>UniteResume search -no-start-insert<CR>

  nnoremap <silent> <SID>[unite]o :<C-u>UniteWithBufferDir  file file/new file_mru -hide-source-names -buffer-name=files<CR>
  nnoremap <silent> <SID>[unite]O :<C-u>UniteWithCurrentDir file_mru file -buffer-name=files<CR>
  nnoremap <silent> <SID>[unite]f :<C-u>UniteWithBufferDir  file file/new -hide-source-names -buffer-name=files<CR>
  nnoremap <silent> <SID>[unite]F :<C-u>UniteWithCurrentDir file file/new -buffer-name=files<CR>
  nnoremap <silent> <SID>[unite]r :<C-u>UniteWithBufferDir  file_mru -no-split -buffer-name=files<CR>
  nnoremap <silent> <SID>[unite]w :<C-u>Unite window:no-current<CR>
  nnoremap <silent> <SID>[unite][ :<C-u>Unite outline fold -vertical -hide-source-names -winwidth=40 -buffer-name=outline<CR>
  nnoremap <silent> <SID>[unite]> :<C-u>Unite output<CR>
  nnoremap <silent> <SID>[unite]p :<C-u>Unite register history/yank -buffer-name=register -no-split<CR>
  nnoremap <silent> <SID>[unite]: :<C-u>Unite history/command -start-insert<CR>
  nnoremap <silent> <SID>[unite]. :<C-u>Unite source<CR>
  nnoremap <silent> <SID>[unite]q :<C-u>Unite qf -no-quit -no-empty -auto-resize -buffer-name=quickfix<CR>
  nnoremap <silent> <SID>[unite]g :<C-u>Unite grep -buffer-name=search<CR>
  nnoremap <silent> <SID>[unite]\c :<C-u>Unite colorscheme -auto-preview<CR>
  nnoremap <silent> <SID>[unite]h :<C-u>Unite help -auto-preview<CR>

  if has('gui_running')
    nnoremap <silent> <SID>[unite]b :<C-u>Unite buffer_tab -immediately<CR>
  else
    nnoremap <silent> <SID>[unite]b :<C-u>Unite buffer -immediately<CR>
  endif

  " JavaScript {{{
  autocmd MyInit FileType javascript nnoremap <silent><buffer> <Space>kj :<C-u>Unite -start-insert -default-action=split ref/javascript<CR>
  autocmd MyInit FileType javascript nnoremap <silent><buffer> <Space>kq :<C-u>Unite -start-insert -default-action=split ref/jquery<CR>
  " }}}

  " Ruby {{{
  autocmd MyInit FileType ruby* nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/refe<CR>
  autocmd MyInit FileType ruby* nnoremap <silent><buffer> <S-k>    :<C-u>UniteWithCursorWord -default-action=split ref/refe<CR>
  " }}}

  " Perl {{{
  autocmd MyInit FileType perl    nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/perldoc<CR>
  autocmd MyInit FileType perl    nnoremap <silent><buffer> <S-k> :<C-u>UniteWithCursorWord -default-action=split ref/perldoc<CR>
  " }}}
endfunction " }}}
unlet unite
" }}}
" foldCC {{{
let foldCC = neobundle#get('foldCC')
function! foldCC.hooks.on_source(bundle) " {{{
  set foldtext=FoldCCtext()
  set foldcolumn=4
endfunction " }}}
unlet foldCC
" }}}
" hier {{{
let g:hier_enabled = 1
" }}}
" quickrun {{{
if !exists('g:quickrun_config')
  let g:quickrun_config = {}
endif
" }}}
" watchdogs -- ÊßãÊñáÊ§úË®º {{{
let g:watchdogs_check_BufWritePost_enable = 1

let g:quickrun_config['watchdogs_checker/_'] = {
      \   'outputter/quickfix/open_cmd' : '',
      \   'hook/hier_update/enable_exit' : 1,
      \   'runner/vimproc/updatetime' : 40,
      \   'hook/unite_quickfix/enable_failure' : 1,
      \   'hook/unite_quickfix/enable_success' : 1,
      \   'hook/unite_quickfix/unite_options' : '-no-quit -no-empty -auto-resize -resume -buffer-name=quickfix',
      \ }
let g:quickrun_config['watchdogs_checker/perl-projectlibs'] = {
      \   'command' : 'perl',
      \   'exec' : '%c %o -cw -MProject::Libs %s:p',
      \   'quickfix/errorformat' : '%m\ at\ %f\ line\ %l%.%#',
      \ }
let g:quickrun_config['watchdogs_checker/cpanfile'] = {
      \   'command' : 'perl',
      \   'exec' : '%c %o -w -MModule::CPANfile -e "Module::CPANfile->load(q|%S:p|)"',
      \   'quickfix/errorformat' : '%m\ at\ %f\ line\ %l%.%#',
      \ }
let g:quickrun_config['perl/watchdogs_checker'] = {
      \   'type' : 'watchdogs_checker/perl-projectlibs',
      \ }
let g:quickrun_config['cpanfile/watchdogs_checker'] = {
      \   'type' : 'watchdogs_checker/cpanfile',
      \ }

let watchdogs = neobundle#get('vim-watchdogs')
function! watchdogs.hooks.on_source(bundle) " {{{
  call watchdogs#setup(g:quickrun_config)
endfunction " }}}
unlet watchdogs
" }}}
" smartinput {{{
call smartinput#map_to_trigger('i', '<Plug>(smartinput_BS)',  '<BS>',    '<BS>')
call smartinput#map_to_trigger('i', '<Plug>(smartinput_C-h)', '<BS>',    '<C-h>')
call smartinput#map_to_trigger('i', '<Plug>(smartinput_CR)',  '<Enter>', '<Enter>')
call smartinput#define_rule({
      \   'at'    : '\s\+\%#',
      \   'char'  : '<CR>',
      \   'input' : "<C-o>:call setline('.', substitute(getline('.'), '\\s\\+$', '', ''))<CR><CR>",
      \ })
" }}}
" vim-cpanfile {{{
if !exists('g:neocomplcache_dictionary_filetype_lists')
  let g:neocomplcache_dictionary_filetype_lists = {}
endif
" }}}
" vim-smartchr {{{
let smartchr = neobundle#get('vim-smartchr')
function! smartchr.hooks.on_source(bundle)
  inoremap <expr> = smartchr#loop(' = ', ' == ', '=')

  autocmd MyInit FileType javascript inoremap <buffer><expr> = smartchr#loop(' = ', ' == ', ' === ')
  autocmd MyInit FileType javascript inoremap <buffer><expr> \ smartchr#one_of('function ', '\')
  autocmd MyInit FileType ruby* inoremap <buffer><expr> = smartchr#loop(' = ', ' == ', ' === ', ' != ')
  autocmd MyInit FileType ruby* inoremap <buffer><expr> , smartchr#loop(', ', ' => ', ',')
  autocmd MyInit FileType coffee inoremap <buffer><expr> = smartchr#loop(' = ', ' == ', ' === ', '=')
  autocmd MyInit FileType coffee inoremap <buffer><expr> \ smartchr#one_of(' ->', '\')
  autocmd MyInit FileType haskell inoremap <buffer><expr> = smartchr#loop(' = ', '=')
  autocmd MyInit FileType haskell inoremap <buffer><expr> . smartchr#one_of(' -> ', '.')
  autocmd MyInit FileType haskell inoremap <buffer><expr> , smartchr#one_of(' <- ', ',')
  autocmd MyInit FileType perl    inoremap <buffer><expr> . smartchr#one_of('.', '->', '.')
  autocmd MyInit FileType perl    inoremap <buffer><expr> , smartchr#one_of(', ', ' => ', ',')
  autocmd MyInit FileType perl    inoremap <buffer><expr> = smartchr#loop(' = ', ' == ', ' != ', ' =~ ', ' !~ ', ' <=> ', '=')
endfunction
unlet smartchr
" }}}
" eskk.vim {{{
let eskk = neobundle#get('eskk.vim')
function! eskk.hooks.on_source(bundle) " {{{
  let g:eskk#directory = expand('~/.vim/.eskk')

  let user_dictionary = expand('~/Library/Application Support/AquaSKK/skk-jisyo.utf8')
  let large_dictionary = expand('~/Library/Application Support/AquaSKK/SKK-JISYO.L')

  if filereadable(user_dictionary)
    let g:eskk#dictionary = user_dictionary
  endif

  if filereadable(large_dictionary)
    let g:eskk#large_dictionary = large_dictionary
  endif

  imap <C-o> <Plug>(eskk:toggle)
endfunction " }}}
unlet eskk
" }}}
" indentLine {{{
let g:indentLine_showFirstIndentLevel = 1
" }}}
" Align {{{
let alignta = neobundle#get('vim-alignta')
function! alignta.hooks.on_source(bundle)
  vmap ,a :Alignta
  vmap ,= :Alignta =<CR>
  vmap ,> :Alignta =><CR>
endfunction
unlet alignta
" }}}
" perl-local-lib-path.vim {{{
let g:perl_local_lib_path = "t/lib"
let perl_local_lib = neobundle#get('perl-local-lib-path.vim')
function! perl_local_lib.hooks.on_source(bundle)
  autocmd MyInit FileType perl PerlLocalLibPath
endfunction
unlet perl_local_lib
" }}}
" memolist.vim {{{
let g:memolist_path = expand('~/memo')
let g:memolist_memo_suffix = 'hatena'
let g:memolist_unite = 1
let g:memolist_memo_date = '%Y-%m-%dT%H:%M:%S'
let g:memolist_template_dir_path = expand('~/.vim/plugin/memolist-templates')
" }}}
" operator-surround {{{
let bundle = neobundle#get('vim-operator-surround')
function! bundle.hooks.on_source(bundle)
  map <silent> sa <Plug>(operator-surround-append)
  map <silent> sd <Plug>(operator-surround-delete)
  map <silent> sr <Plug>(operator-surround-replace)
endfunction
unlet bundle
" }}}
" }}}

" unite-git-files-conflict {{{
let s:unite_git_files_conflict = {
      \   'name' : 'git/files/conflict',
      \ }
function! s:unite_git_files_conflict.gather_candidates(args, context)
  let output = unite#util#system('git diff-files --name-only --diff-filter=U')
  let candidates = map(split(output, "\n"), '{
        \ "word" : fnamemodify(v:val, ":p"),
        \ "source" : "git/files/conflict",
        \ "kind" : "file",
        \ "action__path" : fnamemodify(v:val, ":p"),
        \ }')
  return candidates
endfunction
call unite#define_source(s:unite_git_files_conflict)
" }}}

" unite-git-files-modified {{{
let s:unite_git_files_modified = {
      \   'name' : 'git/files/modified',
      \ }
function! s:unite_git_files_modified.gather_candidates(args, context)
  let output = unite#util#system('git ls-files --modified')
  let candidates = map(split(output, "\n"), '{
        \ "word" : fnamemodify(v:val, ":p"),
        \ "source" : "git/files/modified",
        \ "kind" : "file",
        \ "action__path" : fnamemodify(v:val, ":p"),
        \ }')
  return candidates
endfunction
call unite#define_source(s:unite_git_files_modified)
" }}}

" unite-git-files-others {{{
let s:unite_git_files_others = {
      \   'name' : 'git/files/others',
      \ }
function! s:unite_git_files_others.gather_candidates(args, context)
  let output = unite#util#system('git ls-files --others --exclude-standard')
  let candidates = map(split(output, "\n"), '{
        \ "word" : fnamemodify(v:val, ":p"),
        \ "source" : "git/files/others",
        \ "kind" : "file",
        \ "action__path" : fnamemodify(v:val, ":p"),
        \ }')
  return candidates
endfunction
call unite#define_source(s:unite_git_files_others)
" }}}

" Colorscheme {{{
set bg=dark
colorscheme noctu
" }}}

command! Sketch call s:sketch() " {{{
function! s:sketch() " {{{
  if !exists('g:sketch_dir')
    let g:sketch_dir = expand('~/sketches')
  endif

  if !isdirectory(g:sketch_dir)
    call mkdir(g:sketch_dir, 'p')
  endif

  let basename = strftime('%Y%m%d%H%M%S')
  let filename = g:sketch_dir . '/' . basename
  execute ':edit ' . filename
endfunction " }}}
" }}}

" Local {{{
let local_vimrc_path = expand('~/.local.vimrc')
if filereadable(local_vimrc_path)
  exec 'source ' . local_vimrc_path
endif
unlet local_vimrc_path
" }}}
